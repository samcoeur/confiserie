from flask import Flask
from werkzeug.security import check_password_hash, generate_password_hash
from flask import Flask, flash, redirect, render_template, request, session
from flask_session import Session
from cs50 import SQL
from datetime import datetime
from helper import loadproduct, login_required , loadorder , notification , login_admin_required, createcart

# db
app = Flask(__name__)

# Configure CS50 Library to use SQLite database
db = SQL("sqlite:///product.db")
order_notification = 1


app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)



@app.route("/", methods=["GET","POST"])
def index():
    if request.method == "POST":
        department = request.form.get("department").lower()
        products=loadproduct(db,department)
        return render_template("layout.html", products=products,  message="Select a product")
    products = db.execute("select * from products")
    return render_template("layout.html", products=products, cart_notification = notification(db))



@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        username = request.form.get("username")
        firstname = request.form.get("firstname")
        lastname = request.form.get("lastname")
        phonenumber = request.form.get("phone_number")
        email = request.form.get("email")
        gender = request.form.get("gender")
        password = request.form.get("password")
        confirmation = request.form.get("confirmation")
        if password != confirmation:
            flash("password and confirmation dont match")
            return redirect("/register")
        if (db.execute("select username from users where username = ?", username)) == 1:
            flash("username exists already")
            return redirect("/register")
        db.execute(
            "insert into users (id,username,hash,email) values(?,?,?,?)",
            username,
            generate_password_hash(password),
            email,
        )
        session["user_id"] = db.execute(
            "select id from users where username = ? ", username
        )[0]["id"]
        # log in customers infos
        db.execute(
            "insert into customers (user_id,firstname,lastname,gender,phone_number,address,business_name) values(?,?,?,?,?,?,?)",
            session["user_id"],
            firstname,
            lastname,
            gender,
            phonenumber,
            "home address",
            "My business",
        )
        session["username"] = username
        session["firstname"] = firstname
        createcart(db,session["user_id"],datetime.today())
        flash("successfully registered")
        return redirect("/")
    else:
        return render_template("form.html", register="register")


@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        rows = db.execute("select * from users where username = ?", username)
        if len(rows) != 1 or not check_password_hash(rows[0]["hash"], password):
            flash("invalid username or password")
            return redirect("/login")
        session["user_id"] = db.execute(
            "select id from users where username = ?", username
        )[0]["id"]
        session["username"] = username
        session["firstname"] = db.execute(
            "select firstname from customers where user_id = ?", session["user_id"]
        )[0]["firstname"]
        # create an empty cart for customer upon sign in if he doest have one
        createcart(db,session["user_id"],datetime.today())

        flash("sucessfully logged in Welcome")
        return redirect("/")
    else:
        flash("must have an account to place your order !!!")
        return render_template("form.html", login="go")


@app.route("/logout")
def logout():
    session.clear()
    flash("thanks for your visit")
    return redirect("/login")


@app.route("/select", methods=["GET", "POST"])
@login_required
def select():
    if request.method == "POST":
        action = request.form.get("action")
        product_id = request.form.get("product_id")
        units = request.form.get("units")
        cost = request.form.get("cost")
        select = db.execute("select * from products where id = ? " , product_id)
        select[0]["units"] = units
        select[0]["cost"] = cost
        if action == "remove" :
            db.execute("delete  from orders where status = ? and (product_id = ? and customer_id =?) " ,
                            "incomplete",
                            product_id,
                            session["user_id"])
            return redirect("/cart")


        order = db.execute("select * from orders where status = ? and (product_id = ? and customer_id =?) " ,
                            "incomplete",
                            product_id,
                            session["user_id"])
        if len(order) == 0:
                return render_template("order.html",cart_notification = notification(db), select = select[0])
        else:
                order[0]["img_name"] = select[0]["img_name"]
                order[0]["price"] = select[0]["price"]
                order[0]["id"] = select[0]["id"]
                order[0]["name"] = select[0]["name"]
                return render_template("order.html",cart_notification = notification(db), select = order[0])

    else:
        return redirect("/")



@app.route("/add", methods=["GET", "POST"])
@login_required
def add():
    if request.method == "POST":
        product_id = request.form.get("product_id")
        print(product_id)
        total = request.form.get("total")
        units = request.form.get("units")
        department= request.form.get("department")
        select = db.execute("select * from products where id = ?", product_id)
        try:
            units = int(units)
        except ValueError:
            flash("wrong entry")
            return redirect("/")
        if units <= 0 or units > 20:
            if units > 20:
                flash("order exceeds the 20 units limits")
            else:
                flash("wrong entery units")
            select[0]["units"] = 0 ;
            return render_template("order.html", select=select[0])
        # get the units in stock of the product
        units_in_stock =db.execute("select (stock_units) from products where id = ?" , product_id)[0]["stock_units"]
        if units > units_in_stock:
            flash(" not anought units in stock ")
            return render_template("order.html", select=select[0])

        # we check if the product has been already added by the customer
        order =db.execute("select * from orders where status = ? and (product_id = ? and customer_id = ?) ","incomplete", product_id, session["user_id"])
        if len(order) == 1 :
            db.execute(
                "update  orders set units = ? , cost =? where status = ? and (product_id = ? and customer_id =?)",
                units,
                round(float(total),2),
                "incomplete",
                product_id,
                session["user_id"]
            )
        else:
            db.execute(
            "insert into orders (customer_id , product_id, product_name, units ,cost,status) VALUES(?,?,?,?,?,?)",
            session["user_id"],
            product_id,
            select[0]["name"],
            units,
            round(float(total),2),
            "incomplete"
        )
        flash("successfully added !!!")
        notification = db.execute(
            "select count(*) count from orders where customer_id = ? and status= ?",
             session["user_id"],
             "incomplete"
        )[0]["count"]

        return render_template(
            "cart.html",
            carts=loadorder(db,session["user_id"]),
            cart_notification = notification
             )
    else:
        return redirect("/")




@app.route("/cart", methods =["GET","POST"])
def cart():
    if request.method == "POST" :
        action = request.form.get("action")
        address = request.form.get("address")
        customername = request.form.get("customername")
        total_cost = request.form.get("total_cost")
        total_units = request.form.get("total_units")
        product_units = request.form.get("product_units")
        today = datetime.today()
        if action == "finalize":
            rows = db.execute(
                "select * from orders join products on products.id=orders.product_id where status =? and customer_id = ? " ,
                "incomplete",
                session["user_id"]
                )
            for row in rows :
                if row["units"] > row["stock_units"]:
                    flash("not enought units in stocks for this product")
                    return render_template("order.html", select=row)
            #create the cart and add the order to the cart
            db.execute(
                "insert into cartS (customer_id,customername,total_cost,product_units,total_units,address,date)VALUES (?,?,?,?,?,?,?)",
                session["user_id"] ,
                customername,
                total_cost,
                product_units,
                total_units,
                address,
                today
                )

            # update products stocks
            rows =db.execute("select product_id , units , stock_units from orders join products on products.id = orders.product_id where status= ? and customer_id = ?" ,"incomplete", session["user_id"])
            for row in rows :
                 db.execute(
                "update products set stock_units = ? where id =?",
                row["stock_units"] - row["units"],
                row["product_id"]
                   )
            #set orders to complete  status
            db.execute(
                      "update orders set status= ? where customer_id = ? and status = ?",
                      "complete",
                      session["user_id"],
                      "incomplete")
            return redirect("/")
        if action == "cancel":
            db.execute(
                "delete from orders where status =? and customer_id =?",
                 "incomplete",
                 session["user_id"]
                 )
            return redirect("/")

    return render_template(
           "cart.html",
            carts=loadorder(db,session["user_id"]),
            cart_notification = notification(db)
                  )

@app.route("/historic")
def historic():
    carts = db.execute("select * from carts where customer_id = ?" , session["user_id"])
    orders = db.execute(" select * from orders join products on products.id = orders.product_id where status= ? and customer_id =?",
                        "complete",
                        session["user_id"])
    counts = []
    if len(carts) != 0 :
        for row in carts :
            counts.append(row["product_units"])

    return render_template("cart.html" , orders = orders ,counts = counts)


@app.route("/search", methods=["GET", "POST"])
def search():
    if request.method == "POST":
        search = request.form.get("search")
        if not search:
            return redirect("/")
        else:
            search = "%" + search + "%"
            products = db.execute("select * from products where name like ? ", search)
            if len(products) == 0:
                flash("no item found!!!")
                return redirect("/")
            else:
                message = str(len(products))
                flash(message + " items found !!!")
                return render_template("layout.html", products=products, cart_notification = notification(db))
    else:
        return redirect("/")

@app.route("/contact")
def contact():
    return render_template("contact.html", contact= "go")

@app.route("/about")
def about():
    return render_template("about.html", about= "go")



@app.route("/newproduct", methods=["GET","POST"])
@login_admin_required
def newproduct():
    if request.method == "POST" :
           action = request.form.get("action")
           product_id = request.form.get("product_id")
           name = request.form.get("name")
           price = request.form.get("price")
           uom_id = request.form.get("uom_id")
           img_name = request.form.get("img_name")
           print(img_name)
           department = request.form.get("department").lower()
           stock_units = request.form.get("stock_units")
           print("product_id =:" , product_id)
           if action =="submit":
               db.execute(
               "insert into products (name,price,uom_id,img_name,department,stock_units) VALUES(?,?,?,?,?,?)",
               name,
               price,
               uom_id,
               img_name,
               department,
               stock_units
               )
               return redirect("/myproduct")
           if action == "update":
               db.execute(
               "update products set name =?,price =?,uom_id =?,img_name =?,department =?,stock_units = ? where id = ?",
               name,
               price,
               uom_id,
               img_name,
               department,
               stock_units,
               product_id
               )
               return redirect("/myproduct")
           if action== "delete":
                db.execute(
               "delete from products where id = ?",
               product_id
               )
                return redirect("/myproduct")

    return render_template("product.html", message="new product")


@app.route("/myproduct", methods=["GET","POST"])
@login_admin_required
def Myproduct():
    if request.method == "POST" :
           department = request.form.get("department")
           if department == "new" :
               return redirect("/newproduct")
           return render_template("product.html", products=loadproduct(db,department))
    return render_template("product.html", products=loadproduct(db,"all"), message="my product")


@app.route("/customer")
@login_admin_required
def customer():
    customers = db.execute("select * from customers join users on users.id = customers.user_id ")
    return render_template("product.html", customers=customers)

@app.route("/company")
@login_admin_required
def company():
    return render_template("decoration.html", products=loadproduct(db,"snack"))



  <div class="row">
    <div class="col-md-1">
      <div class="sidebar" style="margin-top:-30px;margin-left:-20px">
        <a class="active" href="/">Home </a>
        <a href="/news">News</a>
        <a href="/contact">Contact us</a>
        <a href="/about">About</a>
      </div>
    </div>




.orderproduct {
    max-width: 1300px;
    min-width: 500px;
    min-height:700px;
    max-height: 1200px;
    padding: 10px;
    margin: 20px 0px;
    overflow: auto;
}



.orderproduct .newitem {
    position: relative;
    height: 100%;
    width: 100%;
    max-width: 1300px;
    min-width: 300px;
    max-height: 1200px;
    min-height: 700px;
    margin: 25px auto;
    padding: 15px;
    border-radius: 5px;
    overflow: auto;
    border: 2px solid black;
    background: #117DDC;
}



.newitem img {
    height: 100%;
    width: 100%;
    max-height: 300px;
    min-height:200px;
    min-width: 200px;
    max-width: 350px;
    margin: 15px auto;
    border: 1px solid #eee;
    border-radius: 6px;
    background: #389295;
}

.newitem .element {
    height: 100%;
    width: 100%;
    min-width: 400px;
    max-width: 1200px;
    min-height: 550px;
    max-height:1000px;
    border: 1px solid black;
    margin-left:35px;
    padding: 30px;
    display: flex;
    align-items: center;
    flex-direction: column;
    background: #389295;

}

.element h4 {

    font-size: 24px;
    color: white;
    transform: uppercase;
}

.element input {
    text-align: center;
    font-size: 20px;
    background: #389295;
    border: none;
    color: black;
    width: 100px;
}

.element .total {
    text-align: center;
    font-size: 20px;
    background: #389295;
    border: none;
    color: white;
    width: 200px;
}

.element label {

    font-size: 20px;
    background: #389295;
    color: white;

}

.element button {

    margin: 20px;
    font-size: 20px;
    color: white;
    background: blue;
}

{% if select %}

<div class="orderproduct">
  <div class="container">
  <div class="row">
       <div class="col-md-9">
        <div class="newitem">
           <div class="row">
             <form action = "/add" method="post">

                  <div class="col-md-5" >
                    <img src= "static/images/{{ select.img_name }}" name="img" id ="img"  >
                    <input style="display:none" readonly id="img_name" name="img_name" value="">

                    <div class="form-group">
                      <input  readonly type="text" name="name" style="display:none" value="{{ select.name }}" >
                      <h4>{{ select.name }} </h4>
                  </div>
                  <div class="form-inline">
                    <input style="border:none;background:#117DDC;width:70px;color:white;font-size:24px" type="number" id="price" name="price" value ="{{ select.price  }}" readonly  />
                    <h5 style="color:white">DA / Fardeau </h5>
                  </div>

                  </div>

                  <div class="col-md-6">
                    <div class="newitem element">

                        <div class="form-group">
                            <input readonly type="text" name="name" style="display:none" value="{{ select.name }}" >
                            <h4>{{ select.name }} </h4>
                        </div>



                        <div class="form-group" >
                           <label style="color:blue">TOTAL:</label>
                           <input type="number" class="total" id="total" name="total" readonly value="0"/>
                           <label style="color:white"> DA </label>
                        </div>

                        <div class="form-group">
                          <input readonly style="display:none" name="product_id" value="{{ select.id }}" >
                          <button style="height:50px" type="submit" value="add" name="action" class="btn-primary btn-md"> AJOUTER AU PANIER <i class="fa fa-shopping-cart"></i></button>
                        </div>
                        <div class="input-group" style="border: 1px solid black">
                          <button id="down" type="button"  ><span class="glyphicon glyphicon-minus"></span></button>
                          <input  readonly type="text" id="units" name="units" value="{{ select.units }}" />
                          <button id="up" type="button"  ><span class="glyphicon glyphicon-plus"> </span></button>
                        </div>
                    </div>
                  </div>

              </form>
             </div>
           </div>
          </div>
        </div>
       </div>




{% endif %}





bg-white {
    background-color: #ffffff !important;
}

.bg-grey {
    background-color: #eeeeee !important;
}

.bg-black {
    background-color: #555555 !important;
}

.bg-red {
    background-color: #f75353 !important;
}

.bg-green {
    background-color: #51d466 !important;
}


.bg-blue {
    background-color: #609cec !important;
}

.bg-orange {
    background-color: #f78153 !important;
}

.bg-yellow {
    background-color: #fcd419 !important;
}

.bg-purple {
    background-color: #cb79e6 !important;
}

.bg-rose {
    background-color: #ff61e7 !important;
}

.bg-brown {
    background-color: #d08166 !important;
}

/* Button classes */
.btn {
    border-radius: 2px;
    position: relative;
}

.btn.btn-no-border {
    border: 0px !important;
}

/* Button colors */
.btn.btn-white {
    background: #ffffff;
    color: #666666;
    border: 1px solid #dddddd;
}

.btn.btn-white:hover,
.btn.btn-white:focus,
.btn.btn-white.active,
.btn.btn-white:active {
    background: #f7f7f7;
    color: #666666;
}

.btn.btn-grey {
    background: #eeeeee;
    color: #666666;
    border: 1px solid #d5d5d5;
}

.btn.btn-grey:hover,
.btn.btn-grey:focus,
.btn.btn-grey.active,
.btn.btn-grey:active {
    background: #d5d5d5;
    color: #999;
}

.btn.btn-black {
    color: #ffffff;
    background: #666666;
    border: 1px solid #4d4d4d;
}

.btn.btn-black:hover,
.btn.btn-black:focus,
.btn.btn-black.active,
.btn.btn-black:active {
    background: #4d4d4d;
    color: #ffffff;
}

.btn.btn-red {
    color: #ffffff;
    background: #ed5441;
    border: 1px solid #e52d16;
}

.btn.btn-red:hover,
.btn.btn-red:focus,
.btn.btn-red.active,
.btn.btn-red:active {
    color: #ffffff;
    background: #e52d16;
}

.btn.btn-green {
    color: #ffffff;
    background: #51d466;
    border: 1px solid #30c247;
}

.btn.btn-green:hover,
.btn.btn-green:focus,
.btn.btn-green.active,
.btn.btn-green:active {
    background: #30c247;
    color: #ffffff;
}

.btn.btn-lblue {
    color: #ffffff;
    background: #32c8de;
    border: 2px solid #1faabe;
}

.btn.btn-lblue:hover,
.btn.btn-lblue:focus,
.btn.btn-lblue.active,
.btn.btn-lblue:active {
    background: #1faabe;
    color: #ffffff;
}

.btn.btn-blue {
    color: #ffffff;
    background: #609cec;
    border: 1px solid #3280e7;
}

.btn.btn-blue:hover,
.btn.btn-blue:focus,
.btn.btn-blue.active,
.btn.btn-blue:active {
    background: #3280e7;
    color: #ffffff;
}

.btn.btn-orange {
    color: #ffffff;
    background: #f8a841;
    border: 1px solid #f69110;
}

.btn.btn-orange:hover,
.btn.btn-orange:focus,
.btn.btn-orange.active,
.btn.btn-orange:active {
    background: #f69110;
    color: #ffffff;
}

.btn.btn-yellow {
    background: #fcd419;
    color: #ffffff;
    border: 1px solid #dfb803;
}

.btn.btn-yellow:hover,
.btn.btn-yellow:focus,
.btn.btn-yellow.active,
.btn.btn-yellow:active {
    background: #dfb803;
    color: #ffffff;
}

.btn.btn-purple {
    background: #cb79e6;
    color: #ffffff;
    border: 1px solid #ba4ede;
}

.btn.btn-purple:hover,
.btn.btn-purple:focus,
.btn.btn-purple.active,
.btn.btn-purple:active {
    background: #ba4ede;
    color: #ffffff;
}

.btn.btn-rose {
    background: #ff61e7;
    color: #ffffff;
    border: 1px solid #ff2edf;
}

.btn.btn-rose:hover,
.btn.btn-rose:focus,
.btn.btn-rose.active,
.btn.btn-rose:active {
    background: #ff2edf;
    color: #ffffff;
}

.btn.btn-brown {
    background: #d08166;
    color: #ffffff;
    border: 1px solid #c4613f;
}

.btn.btn-brown:hover,
.btn.btn-brown:focus,
.btn.btn-brown.active,
.btn.btn-brown:active {
    background: #c4613f;
    color: #ffffff;
}



 html = render_template(
            "receipt.html",
            receipts=receipts)
            static_path = "/static/"
            file_path = "pdfs/out.pdf"
             # This may vary depending on your system
            pdf = pdfkit.from_string(html, False)
            response = make_response(pdf)
            response.headers["Content-Type"] = static_path
            response.headers["Content-Disposition"] = "inline; filename = file_path"


<div class="row">
   <div class="col-md-8" >
    <label  style="margin-top:15px;height:20px ;color:black ;font-size:17px"  > {{ item.product_name }} :
      Units :{{ item.units }}    Totale {{ item.cost }} DA
     </label>
   </div>
 </div>